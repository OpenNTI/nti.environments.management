#!/bin/bash

source /etc/nti/container_versions
source /usr/local/lib/nti/nti-container-functions

pod=$1
podroot=/opt/pods/$pod
logroot=/opt/pods/logs/$pod.nti
runtype=$2

if [ -z "$pod" ]
then
  echo "$(date): ABORT! no pod id specified." 1>&2
  exit 11
fi

if [ -e "$podroot/environment" ]
then
  source $podroot/environment
fi

if [ -z "$runtype" ]
then
  runtype="normal"
fi

if [ -z "$ascienv" ]
then
  ascienv="asci"
fi

if [ -z "$AWS_REGION" ]
then
  AWS_REGION=us-east-1
fi

echo "$(date): Starting $pod environment" 1>&2

create_pod $pod 1>&2
ret=$?
if [ ! "$ret" -eq 0 ]
then
  exit $ret
fi

mount_pod $pod $podroot 1>&2
ret=$?
if [ ! "$ret" -eq 0 ]
then
  exit $ret
fi

if [ "$inactive" == "true" ]
then
  echo "Not starting inactive environment."
  exit 0
fi

if [[ -n "$assetbase" && -e "$assetbase/$pod" ]]
then
  assetroot="$assetbase/$pod"
else
  assetroot="$podroot/assets"
fi

if [[ -n "$contentbase" && -e "$contentbase/$pod" ]]
then
  contentroot="$contentbase/$pod"
else
  contentroot="$podroot/content"
fi

if [[ -n "$pluginbase" && -e "$pluginbase/$pod" ]]
then
  pluginroot="$pluginbase/$pod"
else
  pluginroot="$podroot/dataserver/plugins"
fi

if [[ -n "$varbase" && -e "$varbase/$pod" ]]
then
  varroot="$varbase/$pod"
else
  varroot="$podroot/dataserver"
fi

ACCOUNT=$(aws sts get-caller-identity | jq '.Account' | sed -e "s|\"||g")

podman container exists $pod-dataserver
ret=$?
if [ "$ret" -eq 1 ]
then
  echo "$(date): Starting $pod-dataserver container" 1>&2
  if [ ! -e "$podroot/dataserver/.aws" ]
  then
    mkdir -p "$podroot/dataserver/.aws"
    chown -R 1000.1000 "$podroot/dataserver/.aws"
    chcon -R system_u:object_r:container_file_t:s0 "$podroot/dataserver/.aws"
  fi
  if [ ! -e "$podroot/dataserver/.aws/config" ]
  then
    generate_awscli_config "$podroot/dataserver/.aws/" $AWS_REGION
    chown 1000.1000 "$podroot/dataserver/.aws/config"
    chcon system_u:object_r:container_file_t:s0 "$podroot/dataserver/.aws/config"
  fi
  if [ ! -e "$podroot/dataserver/data/relstorages_users_storage" ]
  then
    mkdir -p "$podroot/dataserver/data/relstorages_users_storage"
    chown -R 1000.1000 "$podroot/dataserver/data"
    chcon -R system_u:object_r:container_file_t:s0 "$podroot/dataserver/data"
  fi
  if [ ! -e "$pluginroot" ]
  then
    mkdir -p "$pluginroot"
    chown -R 1000.1000 "$pluginroot"
    chcon -R system_u:object_r:container_file_t:s0 "$pluginroot"
  fi
  if [ ! -e "$varroot/maildir" ]
  then
    mkdir -p "$varroot/maildir/"{cur,new,tmp}
    chown -R 1000.1000 "$varroot/maildir"
    chcon -R system_u:object_r:container_file_t:s0 "$varroot/maildir"
  fi
  if [ ! -e "$podroot/dataserver/run" ]
  then
    mkdir -p "$podroot/dataserver/run"
    chown -R 1000.1000 "$podroot/dataserver/run"
    chcon -R system_u:object_r:container_file_t:s0 "$podroot/dataserver/run"
  fi
  if [ ! -e "$logroot" ]
  then
    mkdir -p "$logroot"
    chmod 1777 "$logroot"
    chcon -R  system_u:object_r:container_file_t:s0 "$logroot"
  fi
  if [ ! -e "$podroot/logs" ]
  then
    ln -s "$logroot" "$podroot/logs"
  fi
  if [ ! -e "$assetroot/default-assets/site-assets" ]
  then
    mkdir -p "$assetroot/default-assets/site-assets"
    chown -R 1000.1000 "$assetroot"
    chcon -R system_u:object_r:container_file_t:s0 "$assetroot"
  fi
  if [ ! -e "$contentroot/sites" ]
  then
    mkdir -p "$contentroot/sites"
    chown -R 1000.1000 "$contentroot"
    chcon -R system_u:object_r:container_file_t:s0 "$contentroot"
  fi
  podman run --pod=$pod --volume $podroot/dataserver/.boto:/home/ntiuser/.boto:ro --volume $podroot/dataserver/.aws:/home/ntiuser/.aws:ro --volume $podroot/dataserver/etc:/home/ntiuser/buildout/etc:rw --volume $podroot/dataserver/data:/home/ntiuser/buildout/data:rw --volume $pluginroot:/home/ntiuser/buildout/plugins:rw --volume $logroot:/home/ntiuser/buildout/var/log:rw --volume $varroot/maildir:/home/ntiuser/buildout/var/maildir:rw --volume $podroot/dataserver/run:/home/ntiuser/buildout/var/run:rw --volume $assetroot:/srv/assets:rw --volume $contentroot:/srv/content:rw --name $pod-dataserver --detach --rm --privileged docker://$ACCOUNT.dkr.ecr.us-east-1.amazonaws.com/platform/dataserver:$dataserver 1>&2
  ret=$?
  if [ "$ret" -eq 0 ]
  then
    echo "$(date): $pod-dataserver container running" 1>&2
    systemctl enable "nti-dataserver-logrotate@$pod.timer" 1>&2
    systemctl start "nti-dataserver-logrotate@$pod.timer" 1>&2
    if [ "$node_digest" != "false" ]
    then
      systemctl enable "nti-notable-digest@$pod.timer" 1>&2
      systemctl start "nti-notable-digest@$pod.timer" 1>&2
    fi
    systemctl enable "nti-process-bounce-queue@$pod.timer" 1>&2
    systemctl start "nti-process-bounce-queue@$pod.timer" 1>&2
    systemctl enable "nti-refresh-auth-token@$pod.timer" 1>&2
    systemctl start "nti-refresh-auth-token@$pod.timer" 1>&2
    add_SRV_record $pod _dataserver_gp._tcp.$pod.nti 8081 1>&2
  else
    echo "$(date): ABORT! Failed to start $pod-dataserver" 1>&2
    echo "$(date): Cleaning up $pod-dataserver."
    podman rm $pod-dataserver 1>&2
    exit 13
  fi
fi

if [ "$redis" != "shared" ]
then
  podman container exists $pod-redis
  ret=$?
  if [ "$ret" -eq 1 ]
  then
    if [ ! -e "$podroot/redis" ]
    then
      mkdir -p "$podroot/redis"
      chown -R 998.996 "$podroot/redis"
      chcon -R system_u:object_r:container_file_t:s0 "$podroot/redis"
    fi
    podman run --pod=$pod --volume $podroot/redis/:/var/lib/redis:rw --volume $logroot:/var/log/redis:rw --name $pod-redis --detach --rm docker://$ACCOUNT.dkr.ecr.us-east-1.amazonaws.com/platform/redis 1>&2
  fi
fi

podman container exists $pod-statsd-exporter
ret=$?
if [ "$ret" -eq 1 ]
then
  podman run --pod=$pod --name $pod-statsd-exporter --detach --rm docker://$ACCOUNT.dkr.ecr.us-east-1.amazonaws.com/prometheus/statsd-exporter:latest 1>&2
  add_SRV_record $pod _statsd_exporter._tcp.$ascienv.nti 9102 1>&2
fi

if [ "$solrhost" == "localhost" ]
then
  podman container exists $pod-solr
  ret=$?
  if [ "$ret" -eq 1 ]
  then
    podman run --pod=$pod --volume $podroot/solr-data:/opt/solr/conf/nti/data:rw --name $pod-solr --detach --rm docker://$ACCOUNT.dkr.ecr.us-east-1.amazonaws.com/platform/solr 1>&2
  fi
fi

if [ "$haproxy" != "shared" ]
then
  podman container exists $pod-haproxy
  ret=$?
  if [ "$ret" -eq 1 ]
  then
    if [ ! -e "$podroot/run" ]
    then
      mkdir -p "$podroot/run"
      chcon -R system_u:object_r:container_file_t:s0 "$podroot/run"
    fi
    podman run --pod=$pod --volume $podroot/run:/run:rw --volume $logroot:/var/log:rw --name $pod-haproxy --detach --rm docker://$ACCOUNT.dkr.ecr.us-east-1.amazonaws.com/platform/haproxy 1>&2
  fi
fi

podman container exists $pod-nginx
ret=$?
if [ "$ret" -eq 1 ]
then
  podman run --pod=$pod --volume $assetroot:/srv/assets:rw --volume $contentroot:/srv/content:rw --volume $logroot:/var/log:rw --name $pod-nginx --detach --rm docker://$ACCOUNT.dkr.ecr.us-east-1.amazonaws.com/platform/nginx 1>&2
  add_SRV_record $pod _static_content._tcp.$pod.nti 8085 1>&2
fi

if [ "$webhost" != "shared" ]
then
  podman container exists $pod-web-service
  ret=$?
  if [ "$ret" -eq 1 ]
  then
    if [ -e "$podroot/overrides/webservice" ]
    then
      podman run --pod=$pod --volume $podroot/overrides/webservice:/opt/nextthought/overrides:rw --volume $logroot:/var/log:rw --name $pod-web-service --detach --rm docker://$ACCOUNT.dkr.ecr.us-east-1.amazonaws.com/platform/web-service:$webservice 1>&2
    else
      podman run --pod=$pod --volume $logroot:/var/log:rw --name $pod-web-service --detach --rm docker://$ACCOUNT.dkr.ecr.us-east-1.amazonaws.com/platform/web-service:$webservice 1>&2
    fi
  fi
fi

if [ -e "$podroot/sockets" ]
then
  podman container exists $pod-sockets
  ret=$?
  if [ "$ret" -eq 1 ]
  then
    podman run --pod=$pod --volume $podroot/sockets/.boto:/home/ntiuser/.boto:ro --volume $podroot/sockets/etc:/home/ntiuser/buildout/etc:rw --volume $podroot/sockets/data:/home/ntiuser/buildout/data:rw --volume $pluginroot:/home/ntiuser/buildout/plugins:rw --volume $logroot:/home/ntiuser/buildout/var/log:rw --volume $podroot/sockets/run:/home/ntiuser/buildout/var/run:rw --volume $assetroot:/srv/assets:rw --volume $contentroot:/srv/content:rw --name $pod-sockets --detach --rm docker://$ACCOUNT.dkr.ecr.us-east-1.amazonaws.com/platform/dataserver:$dataserver 1>&2
    ret=$?
    if [ "$ret" -eq 0 ]
    then
      add_SRV_record $pod _dataserver_sockets._tcp.$pod.nti 8088 1>&2
    fi

  fi
fi

if [ -e "$podroot/dataserver2" ]
then
  podman container exists $pod-dataserver2
  ret=$?
  if [ "$ret" -eq 1 ]
  then
    podman run --pod=$pod --volume $podroot/dataserver2/.boto:/home/ntiuser/.boto:ro --volume $podroot/dataserver/.aws:/home/ntiuser/.aws:ro --volume $podroot/dataserver2/etc:/home/ntiuser/buildout/etc:rw --volume $podroot/dataserver2/data:/home/ntiuser/buildout/data:rw --volume $pluginroot:/home/ntiuser/buildout/plugins:rw --volume $logroot:/home/ntiuser/buildout/var/log:rw --volume $varroot/maildir:/home/ntiuser/buildout/var/maildir:rw --volume $podroot/dataserver2/run:/home/ntiuser/buildout/var/run:rw --volume $assetroot:/srv/assets:rw --volume $contentroot:/srv/content:rw --name $pod-dataserver2 --detach --rm --privileged docker://$ACCOUNT.dkr.ecr.us-east-1.amazonaws.com/platform/dataserver:$dataserver 1>&2
  fi
fi

if [ ! "$runtype" == "init" ]
then
  #Waiting for the DS to be up
  echo -n "$(date): Waiting for dataserver socket" 1>&2
  until [ -e "$podroot/dataserver/run/dataserver.sock" ]
  do
      echo -n "." 1>&2
      sleep 1
  done
  echo "" 1>&2
  echo "$(date): Dataserver socket available" 1>&2
  echo "$(date): Checking if the dataserver is up." 1>&2
  curl -sS --unix-socket /opt/pods/$pod/dataserver/run/dataserver.sock --max-time 300 http://localhost/_ops/ping 1>&2
  ret=$?
  if [ $ret -ne 0 ]
  then
    echo "$(date): ABORT! Dataserver failed to start." 1>&2
    exit 8
  else
    start_dataserver_aux_processes $pod
  fi
fi

chmod go+r $podroot/logs/*.log
echo "$(date): $pod environment is running" 1>&2
