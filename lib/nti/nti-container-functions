
PODMAN_MAJOR=$(podman --version | awk '{ split($3,a,"."); print a[1]; }')

if [ -n "$dnsserver" ]
then
  DNSSERVER="server $dnsserver"
else
  DNSSERVER=""
fi

function add_CNAME () {
    pod=$1
    if [ $PODMAN_MAJOR -ge 3  ]
    then
      infraID=$(podman pod inspect $pod | jq -r ".InfraContainerID[0:12]")
    else
      infraID=$(podman pod inspect $pod | jq -r ".State.infraContainerID[0:12]")
    fi
    podHostName=$pod.nti
    infraIDHostName=$infraID.nti
    infraIPAddress=$(nslookup $infraIDHostName $dnsserver | awk '$0 ~ /Name:/{getline;print $2}')
    hostSystem=$(hostname)
    echo "$(date): Adding DNS records for $podHostName"
    nsupdate -k /etc/dhcp/ddns_keys << EOF
$DNSSERVER
prereq yxdomain $infraIDHostName
update add $podHostName 150 A $infraIPAddress
update add $pod.host.nti 150 CNAME $hostSystem
send
quit
EOF
}

function remove_CNAME (){
    pod=$1
    if [ $PODMAN_MAJOR -ge 3  ]
    then
      infraID=$(podman pod inspect $pod | jq -r ".InfraContainerID[0:12]")
    else
      infraID=$(podman pod inspect $pod | jq -r ".State.infraContainerID[0:12]")
    fi
    podHostName=$pod.nti
    infraIDHostName=$infraID.nti
    echo "$(date): Removing DNS records for $podHostName"
    nsupdate -k /etc/dhcp/ddns_keys << EOF
$DNSSERVER
prereq yxdomain $podHostName
update delete $podHostName
send
prereq yxdomain $pod.host.nti
update delete $pod.host.nti
update delete $podHostName.host.nti
send
quit
EOF
}

function add_SRV_record () {
    pod=$1
    host=$2
    port=$3
    podHostName=$pod.nti
    echo "$(date): Adding SRV record for $host"
    nsupdate -k /etc/dhcp/ddns_keys << EOF
$DNSSERVER
prereq yxdomain $podHostName
update add $host 60 SRV 10 100 $port $podHostName
send
quit
EOF
}

function remove_SRV_record (){
    pod=$1
    host=$2
    port=$3
    podHostName=$pod.nti
    echo "$(date): Removing SRV record for $host"
    nsupdate -k /etc/dhcp/ddns_keys << EOF
$DNSSERVER
prereq yxdomain $host 60 SRV 10 100 $port $podHostName
update delete $host 60 SRV 10 100 $port $podHostName
send
quit
EOF
}

function mount_pod (){
  pod=$1
  podroot=$2
  t0=$(grep -e "$podroot" /proc/mounts)
  if [ -z "$t0" ]
  then
    if [ -e "/opt/volumes/$pod.img" ]
    then
      if [ ! -e "$podroot" ]
      then
        echo "$(date): Creating $podroot"
        mkdir -p $podroot/
      fi
      echo "$(date): Mounting $podroot"
      mount -o loop,rw /opt/volumes/$pod.img $podroot
      ret=$?
      if [ $ret -ne 0 ]
      then
          echo "$(date): ABORT! Attempt to mount $pod data volume failed"
          return 7
      fi
    else
      echo "$(date): ABORT! $pod data volume missing"
      return 6
    fi
  else
    echo "$(date): $pod data volume already mounted"
  fi
}

function create_pod (){
  pod=$1

  podman pod exists $pod
  ret=$?
  if [ "$ret" -eq 1 ]
  then
    echo "$(date): Creating $pod pod"
    if [ $PODMAN_MAJOR -ge 3  ]
    then
      podman pod create --network nti-legacy --name $pod --hostname $pod.nti
    else
      podman pod create --name $pod --hostname $pod.nti
    fi
    ret=$?
    if [ $ret -eq 0 ]
    then
      podman pod start $pod
      ret=$?
      if [ $ret -eq 0 ]
      then
        add_CNAME $pod
      else
        echo "$(date): ABORT! Failed to start pod $pod."
        return 15
      fi
    else
      echo "$(date): ABORT! Failed to create pod $pod."
      return 14
    fi
  fi
}

function start_dataserver_aux_processes (){
  pod=$1
  
  podman container exists $pod-dataserver
  ret=$?
  if [ "$ret" -eq 0 ]
  then
    echo "$(date): Starting dataserver auxilary processes"
    podman exec $pod-dataserver /home/ntiuser/buildout/bin/supervisorctl start server:*
  else
    echo "$(date): ABORT! No dataserver container is running in the $pod environment."
    return 16
  fi
}

function generate_awscli_config (){
    configroot=$1
    region=$2
    cat > $configroot/config << EOF
[default]
region = $region
output = json
EOF
}
